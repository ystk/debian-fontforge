Description: The file splineutil2.c replaced by more recent file from the
 upstream CVS repository with expectation to resolve problem of compiling
 lilypond on s390 architecure.

---
Origin: upstream
Bug-Debian: http://bugs.debian.org/594629
Last-Update: <2010-11-28>

--- a/fontforge/splineutil2.c
+++ b/fontforge/splineutil2.c
@@ -505,7 +505,7 @@ static void TestForLinear(SplinePoint *f
 }
 
 /* Find a spline which best approximates the list of intermediate points we */
-/*  are given. No attempt is made to fix the slopes */
+/*  are given. No attempt is made to use fixed slope angles */
 /* given a set of points (x,y,t) */
 /* find the bezier spline which best fits those points */
 
@@ -599,6 +599,56 @@ return( SplineMake3(from,to));
 	}
     }
 
+#if 0
+    /* if we look at (p(t)-pi) = (a*t^3+b*t^2+c*t+d)-pi */
+    /* d = p0, a = (p1-p0-b-c) */
+    /* We find another set of equations we can minimize. */
+    /* As might be expected it has exactly the same singularities */
+    /*  Just a linear transform, after all. But I worked through it hoping... */
+    if ( order2 ) {
+    } else {
+	/* Try a different approach */
+	double xconst[2], yconst[2], b_term[2], c_term[2] /* Same for x and y */;
+	double determinant;
+	BasePoint off;
+	xconst[0] = xconst[1] = yconst[0] = yconst[1] =
+	    b_term[0] = b_term[1] = c_term[0] = c_term[1] =  0;
+	off.x = to->me.x - from->me.x; off.y = to->me.y-from->me.y;
+	for ( i=0; i<cnt; ++i ) {
+	    double t = mid[i].t, t2 = t*t, t3=t*t2;
+	    double bfactor = t2-t3, cfactor=t-t3, bc = bfactor*cfactor;
+
+	    b_term[0] += bfactor*bfactor;
+	    b_term[1] += bc;
+	    /*c_term[0] += bc;*/ /* Same as b_term[1]; */
+	    c_term[1] += cfactor*cfactor;
+	    xconst[0] += (off.x*t3+from->me.x-mid[i].x)*bfactor;
+	    xconst[1] += (off.x*t3+from->me.x-mid[i].x)*cfactor;
+	    yconst[0] += (off.y*t3+from->me.y-mid[i].y)*bfactor;
+	    yconst[1] += (off.y*t3+from->me.y-mid[i].y)*cfactor;
+	}
+	c_term[0] = b_term[1];
+	determinant = b_term[1]*c_term[0] - b_term[0]*c_term[1];
+	if ( determinant!=0 ) {
+	    double bx, by, cx, cy;
+	    cx = -(xconst[0]*b_term[1] - xconst[1]*b_term[0])/determinant;
+	    cy = -(yconst[0]*b_term[1] - yconst[1]*b_term[0])/determinant;
+	    if ( b_term[0]!=0 ) {
+		bx = -(xconst[0]+c_term[0]*cx)/b_term[0];
+		by = -(yconst[0]+c_term[0]*cy)/b_term[0];
+	    } else {
+		bx = -(xconst[1]+c_term[1]*cx)/b_term[1];
+		by = -(yconst[1]+c_term[1]*cy)/b_term[1];
+	    }
+	    from->nextcp.x = from->me.x + cx/3;
+	    from->nextcp.y = from->me.y + cy/3;
+	    to->prevcp.x = from->nextcp.x + (bx+cx)/3;
+	    to->prevcp.y = from->nextcp.y + (by+cy)/3;
+return( SplineMake3(from,to));
+	}
+    }
+#endif
+
     if ( (spline = IsLinearApprox(from,to,mid,cnt,order2))!=NULL )
 return( spline );
 
@@ -852,6 +902,7 @@ Spline *ApproximateSplineFromPointsSlope
     double offn_, offp_, finaldiff;
     double pt_pf_x, pt_pf_y, determinant;
     double consts[2], rt_terms[2], rf_terms[2];
+ double rfbad=0, rtbad=0;
 
     /* If all the selected points are at the same spot, and one of the */
     /*  end-points is also at that spot, then just copy the control point */
@@ -1027,6 +1078,8 @@ return( SplineMake3(from,to));
 	rt_terms[1] += factor_to*( -tounit.x*rt_term_x + -tounit.y*rt_term_y);
     }
 
+ /* I've only seen singular matrices (determinant==0) when cnt==1 */
+ /* but even with cnt==1 the determinant is usually non-0 (16 times out of 17)*/
     determinant = (rt_terms[0]*rf_terms[1]-rt_terms[1]*rf_terms[0]);
     if ( determinant!=0 ) {
 	double rt, rf;
@@ -1035,6 +1088,16 @@ return( SplineMake3(from,to));
 	    rf = -(consts[0]+rt*rt_terms[0])/rf_terms[0];
 	else /* if ( rf_terms[1]!=0 ) This can't happen, otherwise the determinant would be 0 */
 	    rf = -(consts[1]+rt*rt_terms[1])/rf_terms[1];
+	/* If we get bad values (ones that point diametrically opposed to what*/
+	/*  we need), then fix that factor at 0, and see what we get for the */
+	/*  other */
+	if ( rf>=0 && rt>0 && rf_terms[0]!=0 &&
+		(rf = -consts[0]/rf_terms[0])>0 ) {
+	    rt = 0;
+	} else if ( rf<0 && rt<=0 && rt_terms[1]!=0 &&
+		(rt = -consts[1]/rt_terms[1])<0 ) {
+	    rf = 0;
+	}
 	if ( rt<=0 && rf>=0 ) {
 	    from->nextcp.x = from->me.x + rf*fromunit.x;
 	    from->nextcp.y = from->me.y + rf*fromunit.y;
@@ -1044,7 +1107,12 @@ return( SplineMake3(from,to));
 	    to->noprevcp = rt==0;
 return( SplineMake3(from,to));
 	}
-    }
+	
+  rfbad = rf; rtbad = -rt;
+    } else
+  rfbad = rtbad = -2;
+
+
 
     trylen = (to->me.x-from->me.x)*fromunit.x + (to->me.y-from->me.y)*fromunit.y;
     if ( trylen>flen ) flen = trylen;
@@ -3415,8 +3483,10 @@ return( -1 );
 	    s->to->prevcp = s->to->me;
 	} else {
 	    s->from->nonextcp = true;
-	    s->from->nextcp = s->to->me;
+	    s->from->nextcp = s->from->me;
 	}
+	end->pointtype = pt_corner;
+	SplineRefigure(s);
 return( true );	/* We changed the slope */
     }
     unitslope.x /= len; unitslope.y /= len;
@@ -3435,12 +3505,14 @@ return( true );	/* We changed the slope
 	    s->from->nextcp.x = s->from->me.x + mydot*unitslope.x;
 	    s->from->nextcp.y = s->from->me.y + mydot*unitslope.y;
 	}
+	SplineRefigure(s);
 return( true );	/* We changed the slope */
     }
     
     if ( (xdiff = cp->x - end->me.x)<0 ) xdiff = -xdiff;
     if ( (ydiff = cp->y - end->me.y)<0 ) ydiff = -ydiff;
 
+    to = *cp;
     if ( xdiff<ydiff/10.0 && xdiff>0 ) {
 	to.x = end->me.x;
 	end->pointtype = pt_corner;
